<?php

require_once "PhpFrameworkZero/functions.php";
require_once "PhpFrameworkZero/PlainTextElement.php";
require_once "PhpFrameworkZero/ExpressionElement.php";
require_once "PhpFrameworkZero/EchoElement.php";

class Template {
	/**
	 * @var array $context array of variables that will be passed to the template on execution.
	 */
	public $context;
	private $components = array();
	private $parts;
	/**
	 * Constructs Template object.
	 *
	 * Reads template and stores it as an array of TemplateElement objects.
	 * @param string $name The name of the template, so path should be /app/templates/$name for each app.
	 * @param array $context Optional, {@link $context}.
	 */
	function __construct($name, $context = array()) {
		$file = $this->getTemplateFile($name);
		$this->context = $context;

		$parts = multiexplode(["[[","]]"], $file); // Storing the exploded array, $i%2 = is plaintext
		for ($i = 1; $i < count($parts)/2; $i+=2) $parts[$i] = trim($parts[$i]);
		for ($i = 0; $i < count($parts); $i++) {
			$this->parse_element($parts, $i);
		}
		$this->parts = $parts;
	}

	function getTemplateFile($name) {
		foreach (scandir(".") as $item) {
			$path = "./".$item."/templates/".$name;
			if (is_file($path))
				return file_get_contents($path);
		}
		throw new Exception("Couldn't find template [".$name."]");
	}

	/**
	 * Executes the template
	 *
	 * Renders the template with the context.
	 * @param array $context will OVERRIDE existing context.
	 */
	function execute($context = null) {
		if ($context == null) $context = $this->context;
		foreach ($this->components as $component) {
			echo $component->execute($context);
		}
	}

	/**
	 * Parse a single element.
	 *
	 * Because of closing tags and the like, it operates on
	 * an array directly generated from the plain string file.
	 * @param array $array Array, generated by breaking the file up at delimiters.
	 * @param int $offset Reference, the index to digest, will change to the last index digested.
	 *
	 * @todo utilise the return value and make this pattern make sense.
	 */
	private function parse_element($array, &$offset) {
		$element = null;
		if ($offset%2 == 0) {
			$text = $array[$offset];
			$element = new PlainTextElement($text);
		}
		else if (startswith("echo ", $array[$offset])) {
			$string = substr($array[$offset], 5);
			$element = new EchoElement($string);
		}
		array_push($this->components, $element);
		return null;
	}
}

?>
